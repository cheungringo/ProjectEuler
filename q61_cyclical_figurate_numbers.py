'''
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers 
and are generated by the following formulae:

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number 
(including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), 
is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: 
triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by 
a different number in the set.

'''

def getNumberOfDigit(digit, function):
	numbers = []
	number = 0
	n = 1
	while number < 10**digit:
		number = function(n)
		if number > 10**(digit-1) and number < 10**digit:
			numbers.append(number)
		n += 1
	return numbers

def triangular(n):
	return n*(n+1)/2

def square(n):
	return n*n

def pentagonal(n):
	return n*(3*n-1)/2

def hexagonal(n):
	return n*(2*n-1)

def heptagonal(n):
	return n*(5*n-3)/2

def octagonal(n):
	return n*(3*n-2)

numberTypes = [triangular, square, pentagonal, hexagonal, heptagonal, octagonal]

def getAllNumbers():
	array = []
	for x in range(len(numberTypes)):
		temp = getNumberOfDigit(4, numberTypes[x])
		array.append(temp)
	return array

def recursivelyMatch(array, types, whichType, which, temp):
	if which == 6:
		if str(temp[which-1])[2:] == str(temp[0])[:2]:
			return temp
		else:
			return None
	for x in range(len(array[types[whichType]])):
		if str(temp[which-1])[2:] == str(array[types[whichType]][x])[:2]:
			temp.append(array[types[whichType]][x])
			which += 1
			whichType += 1
			recursion = recursivelyMatch(array, types, whichType, which, temp)
			if recursion != None:
				return recursion
			which -= 1
			whichType -= 1
			del temp[len(temp)-1]
	return None

def kickOffRecursion(array, n):
	for perm in generateNecklace(n):
		for x in range(len(array[perm[0]])):
			temp = []
			temp.append(array[perm[0]][x])
			answer = recursivelyMatch(array, perm, 1, 1, temp)
			if answer != None:
				return answer
	return "Not ordered"

def generateNecklace(n):
	import itertools
	types = [x for x in range(n-1)]
	perms = []
	for permutation in (itertools.permutations(types)):
		perm = []
		perm.append(n-1)
		for each in range(len(permutation)):
			perm.append(permutation[each])
		perms.append(perm)
	return perms

def sumOfList(array):
	total = 0
	for x in range(len(array)):
		total += array[x]
	return total

print sumOfList(kickOffRecursion(getAllNumbers(), 6))





