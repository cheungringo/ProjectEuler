'''
Stated Problem:
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal 
and D = |Pk − Pj| is minimised; what is the value of D?

SubProblems:
Just iterate through a list of arbitrary number of pentagon numbers and keep increasing this list
size until a number is found.
Kind of a brute force solution, but worked after parameters were tweaked. There is perhaps a more elegant
mathematical solution using multivariable calculus.
'''

function generatePentagonals(n){
	pentagonals = [];
	for (var i=1;i<=n;i++){
		pentagonals.push(i*(3*i-1)/2);
	}
	return pentagonals
}

function findDifference(pentagonals){
	var difference = -1;
	for (var i=0;i<pentagonals.length;i++){
		for (var j=i+1;j<pentagonals.length;j++){
			var sum = pentagonals[i]+pentagonals[j];
			var diff = pentagonals[j]-pentagonals[i];
			if (pentagonals.indexOf(sum) >= 0){
				if (pentagonals.indexOf(diff) >= 0){
					if (difference == -1){
						difference = diff;
					}
					else if (diff < difference){
						difference = diff;
					}
				}
			}
		}
	}
	return difference;
}

function getMinimumDifference(){
	var n = 1000;
	while (true){
		n += 500;
		var pentagonals = generatePentagonals(n);
		var D = findDifference(pentagonals);
		if (D != -1){
			return D;
		}	

	}
}
console.log(getMinimumDifference());

